//Exe 7.12 -- Date Class
//create a Date class; 3 instance variables, constructor, set and get methods, displayDate method, test application

package com.mycompany.mhall__wk6_pg1;



public class Date {
    
    private String name;
    private int month; 
    private int day; 

    private int year;
    
    
    //overloaded constructors for creation of Objects with 0 or more set isntance variables
    
    //0-instance variable object; allows client classes to create valueless Date objects
    public Date() {
     this(null, 0, 0, 0);
    }
    
    //create a name-only date Object
    public Date(String name) { 
     this(name,0,0,0);   

    }
    
    //create a name-and-year only date Object
    public Date(String name, int year) {
     this(name, 0, 0, year);

    }
    
    //create a name-month-day date object
    public Date(String name, int month, int day) {
     this(name, month, day, 0);

    }
    //full constructor
    public Date(String name, int month, int day, int year) {
     this.name = name;
     this.month = month;
     this.day = day;
     this.year = year;

     //wrote the below verifier code for practice. implemented this approach while still having about half of the weeks course material to work through
     if (month <= 0 || month > 12) {
          throw new IllegalArgumentException (
          "Month out of range; please choose betwen a range of 1 to 12"
          );   
         }
     
              switch(month) {
             case 1:
             case 3:
             case 5:
             case 7:
             case 8:
             case 10:
             case 12:
                 if (day <= 0 || day > 31) {
                     throw new IllegalArgumentException(
                     "Please choose a date within the month between 1 and 31"
                     );
                 }
                 break;
             case 4:
             case 6:
             case 9:
             case 11:
                 if (day <= 0 || day > 30) {
              throw new IllegalArgumentException (
                "Please choose a date within the month between 1 and 30"
              );   
             }
                 break;
             case 2:
                 if ( day <= 0 || day > 28) {
                  throw new IllegalArgumentException(
                  "Please choose a date within the month between 1 and 28"
                  );// leap year check   
                 } else if (year % 100 == 0 && year % 400 == 0 && day <= 0 || day > 29) {
                  throw new IllegalArgumentException(
                  "Please choose a date within the month between 1 and 29"
                          + "(this February was a leap year)");
                 }
                 break;
             default:
                 System.out.println("An invalid value was used for inputting a day of the month");
         }
     
     if (year > 2023 || year < 1900) {
        throw new IllegalArgumentException (
        "Year out of range; please choose between 1900 and 2023"
        );
    }
     
        
    }
    
    //set and get methods
    
    public void setName(String name) {
     this.name = name;   
    }
    
    public String getName() {
        return name;
    }
         
    public void setMonth(int month) {
         this.month = month;
         if (month <= 0 || month > 12) {
          throw new IllegalArgumentException (
          "Month out of range; please choose betwen a range of 1 to 12"
          );   
         }
    }

    public int getMonth() {
     return month;   
    }
        
    public void setDay(int day) {
         this.day = day;
         switch(month) {
             case 1:
             case 3:
             case 5:
             case 7:
             case 8:
             case 10:
             case 12:
                 if (day <= 0 || day >31) {
                     throw new IllegalArgumentException(
                     "Please choose a date within the month between 1 and 31"
                     );
                 }
                 break;
             case 4:
             case 6:
             case 9:
             case 11:
                 if (day <= 0 || day > 30) {
              throw new IllegalArgumentException (
                "Please choose a date within the month between 1 and 30"
              );   
             }
                 break;
             case 2:
                 if ( day <= 0 || day > 28) {
                  throw new IllegalArgumentException(
                  "Please choose a date within the month between 1 and 28"
                  );   
                 }
                 break;
             default:
                 System.out.println("An invalid value was used for inputting a day of the month");
         }
    }
    
    public int getDay() {
     return day;   
    }

    
    public void setYear(int year) {
         this.month = year;
         
         if (year > 2023 || year < 1900) {
        throw new IllegalArgumentException (
        "Year out of range; please choose between 1900 and 2023"
        );
        }
    }
    
    public int getYear() {
     return year;   
    }

    //formated display date method
    public String displayDate() {
     return String.format("%02d/%02d/%4d",month,day,year);   
    }
    
    //create a date object using another already-created date object
    public Date(Date d) {
        this(d.getName(), d.getMonth(), d.getDay(), d.getYear());
    }
    
}
